#!/usr/bin/env python
'''
KIEHINEN - A kindle collection management software

"kiehinen" (noun); Finnish for 'a feather stick' - see
http://fi.wikipedia.org/wiki/Kiehinen
  and/or
http://en.wikipedia.org/wiki/Feather_stick

Copyright 2010 Kimmo Parviainen-Jalanko <k+kindle@77.fi>. All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

   1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.


Requirements:
    PalmDB module (can be installed from pip - requires 4Suite-XML, pip
    install for 4Suite-XML seems to bug, but it can be found from yum)
''' # Standard BSD 2-clause license << K

import optparse,kindle

def main():

    usage = "usage: %prog [options]"
    ver = "0.1"
    p = optparse.OptionParser(usage=usage,version=ver)
    p.add_option('--new', '-n', help="create a new collection")
    p.add_option('--delete', '-d', help="delete a collection")
    p.add_option('--remove', '-r', help="remove an item from a collection")
    p.add_option('--add', '-a', help="add an item to a collection")
    p.add_option('--list', '-l', action="store_true", dest="list",
        help="list collections", default=False)
    options, args = p.parse_args()

    # Load the json file
    kjd = kindle.load_data()

    # Process options    
    if options.new:
        kindle.add_collection(kjd, options.new)
    elif options.delete:
        kindle.delete_collection(kjd, options.delete)
    elif options.list:
        for key in kjd.keys():
            print str(key.split('@')[0])
    elif options.add:
        kindle.add_item(kjd, options.add, args[0])
    elif options.remove:
        kindle.remove_item(kjd, options.remove, args[0])

    # Write back to file
    kindle.save_data(kjd)

if __name__ == '__main__':
    main()
